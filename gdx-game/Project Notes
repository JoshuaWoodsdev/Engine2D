This document describes the hirechy of 
what is rendered on the screen and in what
order. 
There are as follows for rendering priorties:
1. Background
2. Objects/Sprites
3. Particle Systems
4. UI

Now as to what order these 4 should be rendered in?
There may be a very user friendly answer. 
Instead of manually priortizing what should be rendered first,
we can leave ot up to the user to answer that. 
Each part of the rendering phase can be given a numerical 
Priority indicator.
This value, that will from here on be refered to as the
Proirity Indicator Value, or P.I.V for short. 
The PIV will range from 0 being the first thing to render on screen, to
3 being the last thing to be rendered on screen. 

The PIV will be ranged from 0 to 3 because there are currently
4 rendering types that can be priortized.
The engine can group rendering jobs based on render type or priorty, 
instead of the current method which is to render everything at once.
This would mean that 4 seperate renders would have to be constructed,
and each render can be passed jobs.
 
BACKGROUND RENDERING SHOULD ALWAYS BE DONE FIRST!
Users may manually override this.


Idea for mutli-threaded implimentation
The idea above to setup a group of renders to priortize jobs
based on render type gives way to the possibility of mutli threading. 
The renderer simply takes 2d points and draws lines in between them. 
there for, all the math to compute where that point is actually on the screen
versus in scene can be done seperatly, off of the rendering thread. 
The computed data that will be used to draw to the screen 
can br stored in a buffer, this buffer will store 
all computed points to be draw to screen. 
The renderer can then access this buffer to do its job of drawing to screen.
This allows us to mutli thread the other side of the buffer, The side that is doing all the cpu work
to calculate where on the screen these lines and points will be drawn. 
Note that great care will have to be taken in regards to making sure both sides access this
buffer saftely and async
